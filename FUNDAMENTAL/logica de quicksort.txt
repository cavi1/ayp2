este ordenamiento también se guía por el criterio "divide y vencerás" pero funciona de una manera mas
dolor de maso q el merge

primero se acomoda el vector completo de tal forma que los elementos mas 
pequeños del arreglo queden a la izquierda y los mas grandes a la 
derecha. luego se setea un punto división en el arreglo que determina cual es la parte izquierda del vector y cual
es la parte derecha y en base a eso acomodar todo lo que es mas chico(izquierda) y todo lo que es mas grande(derecha)
y luego seguir dividiendo en porciones de manera recursiva para aplicar lo mismo con las
porciones de las porciones.
a diferencia del merge, el quick sort no espera a llegar a las partes indivisibles del arreglo para comenzar a ordenar
sino que, cuando llega hasta esas partes indivisibles, estas son las únicas que faltan ordenar para que se complete
todo el ordenamiento.

Ejemplo

arreglo inicial:
29 16 21 55 64 12 23 54 62 33 3 65 76 22 1
V  D  					 I

para acomodar las cosas, se ve provisto por "punteros" que se denominan izquierda y derecha
su nombre está puesto así porque se está refiriendo hacia donde se mueven (no de donde empiezan)

la idea es que D avance hacia la derecha hasta que encuentre un valor mayor a V
e I debe avanzar hacia la izquierda hasta que encuentre un valor menor a V
cuando los dos cocluyan sus respectivos recorridos, se intercambian entre sí.

la condición para salir del bucle es que los punteros I y D se crucen entre sí.(si caen en el mismo lugar el bucle continúa una vez mas y si quedan cruzados, aún efectúa el intercambio)
cuando finaliza el algoritmo, el vector mágicamente va a quedar así:

3 16 21 1 22 12 23 29 62 33 54 65 76 64 55 PD=v(8)=29

se puede apreciar que todo lo que es mas chico quedo en la mitad izquierda y todo lo que es 
mas grande en la mitad derecha

además, luego de este primer ordenamiento, sale como parámetro de salida el punto de división
(que en este caso es 8, coincide con la mitad del arreglo, pero no siempre pasa esto)
y este punto de división es el que me va a servir para aplicar la recursión y elegir las siguientes porciones
que se van a ordenar) dato curioso: el elemento que quedó en ese punto división, ya está ordenado(es una falopeada)
por eso despues de hace el llamado con puntodivision+1 y puntodivision-1.

si sigo aplicando el algoritmo con las mitades restantes:

3 16 21 1 22 12 23
V D		I
queda:
1 3 21 16 22 12 23
V I D 			PD=2

llamo a la recursion de la porción restante

21 16 22 12 23
V  D        I

queda
12 16 21 22 23   PD=5

bueno y ahi quedo ordenado, luego va a aplicar el mimo proceso con la mitad restante y va a terminar todo ordenado

       

VENTAJA QUICKSORT: no usa vector auxiliar.